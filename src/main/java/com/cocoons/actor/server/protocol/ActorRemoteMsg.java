/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cocoons.actor.server.protocol;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ActorRemoteMsg extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ActorRemoteMsg\",\"namespace\":\"com.cocoons.actor.server.protocol\",\"fields\":[{\"name\":\"type\",\"type\":\"int\"},{\"name\":\"sid\",\"type\":\"string\"},{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"receiver\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"msg\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int type;
  @Deprecated public java.lang.CharSequence sid;
  @Deprecated public java.lang.CharSequence sender;
  @Deprecated public java.lang.CharSequence receiver;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.nio.ByteBuffer msg;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ActorRemoteMsg() {}

  /**
   * All-args constructor.
   */
  public ActorRemoteMsg(java.lang.Integer type, java.lang.CharSequence sid, java.lang.CharSequence sender, java.lang.CharSequence receiver, java.lang.CharSequence name, java.nio.ByteBuffer msg) {
    this.type = type;
    this.sid = sid;
    this.sender = sender;
    this.receiver = receiver;
    this.name = name;
    this.msg = msg;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return sid;
    case 2: return sender;
    case 3: return receiver;
    case 4: return name;
    case 5: return msg;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.Integer)value$; break;
    case 1: sid = (java.lang.CharSequence)value$; break;
    case 2: sender = (java.lang.CharSequence)value$; break;
    case 3: receiver = (java.lang.CharSequence)value$; break;
    case 4: name = (java.lang.CharSequence)value$; break;
    case 5: msg = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public java.lang.Integer getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.Integer value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'sid' field.
   */
  public java.lang.CharSequence getSid() {
    return sid;
  }

  /**
   * Sets the value of the 'sid' field.
   * @param value the value to set.
   */
  public void setSid(java.lang.CharSequence value) {
    this.sid = value;
  }

  /**
   * Gets the value of the 'sender' field.
   */
  public java.lang.CharSequence getSender() {
    return sender;
  }

  /**
   * Sets the value of the 'sender' field.
   * @param value the value to set.
   */
  public void setSender(java.lang.CharSequence value) {
    this.sender = value;
  }

  /**
   * Gets the value of the 'receiver' field.
   */
  public java.lang.CharSequence getReceiver() {
    return receiver;
  }

  /**
   * Sets the value of the 'receiver' field.
   * @param value the value to set.
   */
  public void setReceiver(java.lang.CharSequence value) {
    this.receiver = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'msg' field.
   */
  public java.nio.ByteBuffer getMsg() {
    return msg;
  }

  /**
   * Sets the value of the 'msg' field.
   * @param value the value to set.
   */
  public void setMsg(java.nio.ByteBuffer value) {
    this.msg = value;
  }

  /** Creates a new ActorRemoteMsg RecordBuilder */
  public static com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder newBuilder() {
    return new com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder();
  }
  
  /** Creates a new ActorRemoteMsg RecordBuilder by copying an existing Builder */
  public static com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder newBuilder(com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder other) {
    return new com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder(other);
  }
  
  /** Creates a new ActorRemoteMsg RecordBuilder by copying an existing ActorRemoteMsg instance */
  public static com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder newBuilder(com.cocoons.actor.server.protocol.ActorRemoteMsg other) {
    return new com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder(other);
  }
  
  /**
   * RecordBuilder for ActorRemoteMsg instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ActorRemoteMsg>
    implements org.apache.avro.data.RecordBuilder<ActorRemoteMsg> {

    private int type;
    private java.lang.CharSequence sid;
    private java.lang.CharSequence sender;
    private java.lang.CharSequence receiver;
    private java.lang.CharSequence name;
    private java.nio.ByteBuffer msg;

    /** Creates a new Builder */
    private Builder() {
      super(com.cocoons.actor.server.protocol.ActorRemoteMsg.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sid)) {
        this.sid = data().deepCopy(fields()[1].schema(), other.sid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sender)) {
        this.sender = data().deepCopy(fields()[2].schema(), other.sender);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.receiver)) {
        this.receiver = data().deepCopy(fields()[3].schema(), other.receiver);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.msg)) {
        this.msg = data().deepCopy(fields()[5].schema(), other.msg);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ActorRemoteMsg instance */
    private Builder(com.cocoons.actor.server.protocol.ActorRemoteMsg other) {
            super(com.cocoons.actor.server.protocol.ActorRemoteMsg.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sid)) {
        this.sid = data().deepCopy(fields()[1].schema(), other.sid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sender)) {
        this.sender = data().deepCopy(fields()[2].schema(), other.sender);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.receiver)) {
        this.receiver = data().deepCopy(fields()[3].schema(), other.receiver);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.name)) {
        this.name = data().deepCopy(fields()[4].schema(), other.name);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.msg)) {
        this.msg = data().deepCopy(fields()[5].schema(), other.msg);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public java.lang.Integer getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder setType(int value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder clearType() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'sid' field */
    public java.lang.CharSequence getSid() {
      return sid;
    }
    
    /** Sets the value of the 'sid' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder setSid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sid = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'sid' field has been set */
    public boolean hasSid() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'sid' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder clearSid() {
      sid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sender' field */
    public java.lang.CharSequence getSender() {
      return sender;
    }
    
    /** Sets the value of the 'sender' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder setSender(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sender = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sender' field has been set */
    public boolean hasSender() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sender' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder clearSender() {
      sender = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'receiver' field */
    public java.lang.CharSequence getReceiver() {
      return receiver;
    }
    
    /** Sets the value of the 'receiver' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder setReceiver(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.receiver = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'receiver' field has been set */
    public boolean hasReceiver() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'receiver' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder clearReceiver() {
      receiver = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder setName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.name = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'name' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder clearName() {
      name = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'msg' field */
    public java.nio.ByteBuffer getMsg() {
      return msg;
    }
    
    /** Sets the value of the 'msg' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder setMsg(java.nio.ByteBuffer value) {
      validate(fields()[5], value);
      this.msg = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'msg' field has been set */
    public boolean hasMsg() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'msg' field */
    public com.cocoons.actor.server.protocol.ActorRemoteMsg.Builder clearMsg() {
      msg = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public ActorRemoteMsg build() {
      try {
        ActorRemoteMsg record = new ActorRemoteMsg();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.Integer) defaultValue(fields()[0]);
        record.sid = fieldSetFlags()[1] ? this.sid : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sender = fieldSetFlags()[2] ? this.sender : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.receiver = fieldSetFlags()[3] ? this.receiver : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.name = fieldSetFlags()[4] ? this.name : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.msg = fieldSetFlags()[5] ? this.msg : (java.nio.ByteBuffer) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
